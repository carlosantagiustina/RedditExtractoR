}
if(plot==T){
colscale = function(x){
if(min(x$comment_score)<0){
min_col  = "firebrick2"
mincolsq = seq(min(as.numeric(x$comment_score)), 0, length.out = ceiling(nrow(x)/2))
maxcolsq = seq(0, max(as.numeric(x$comment_score)), length.out = ceiling(nrow(x)/2))
if(nrow(x) %% 2 == 1){
colsq  = c(mincolsq[-length(mincolsq)],maxcolsq[-1])
} else{
colsq  = c(mincolsq,maxcolsq)
}
} else{
min_col = "ivory"
colsq   = seq(0,max(as.numeric(x$comment_score)),length.out = nrow(x))
}
RP  = grDevices::colorRampPalette(c(min_col,"royalblue"))
col = RP(nrow(x))[c(findInterval(x$comment_score,colsq,all.inside=T))]
return(col)
}
g = igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame)
plot(g,
vertex.frame.color = ifelse(V(g)$controversiality==1,"red",NA),
layout             = layout.reingold.tilford,
vertex.label       = ifelse(V(g)$start_node==1,V(g)$author,V(g)$user),
vertex.label.cex   = ifelse(V(g)$start_node==1,1,0.65),
vertex.label.color = ifelse(V(g)$controversiality==1,"darkred","navy"),
vertex.label.font  = ifelse(V(g)$author==V(g)$user,4,1),
vertex.size        = ifelse(V(g)$start_node==1,20,12),
vertex.color       = ifelse(V(g)$start_node==1,"orange2",colscale(nodes_frame)),
edge.arrow.size    = 0.5,
edge.color         = "skyblue2")
title(content_data$title[1],cex.main=0.75,col.main="royalblue")
}
return(igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame))
}
test1 = reddit_urls(search_terms = "syria",
regex_filter="rugby",
#subreddit="",
cn_threshold=10)
test1 = reddit_urls(search_terms = "syria",
#regex_filter="rugby",
#subreddit="",
cn_threshold=10)
View(test1)
View(test2)
View(test1)
test1 = reddit_urls(search_terms = "syria",
#regex_filter="rugby",
subreddit="IAmA",
cn_threshold=10)
View(test1)
test2 = reddit_content("https://www.reddit.com/r/funny/comments/3q156b/rrrreeeemiiiiix/")
View(test2)
construct_graph(test2,write_to="test.graphml",export_format="graphml")
construct_graph(test2,write_to="test.graphml")
construct_graph = function(content_data,plot=T,write_to=NA){
require(igraph)
edges_frame = content_data[,c("id","structure")]
if(sum(duplicated(edges_frame$structure))>0){
stop("duplicates found in the structure variable -- make sure that content_data only contains a single thread")
}
edges_frame$structure = paste0("0_",as.character(edges_frame$structure))
edges_frame = rbind(data.frame(id="0",structure="0",stringsAsFactors=F),edges_frame)
A = B = edges_frame
colnames(A) = c("from_id","from_structure")
colnames(B) = c("to_id",  "to_structure")
edges_frame = merge(A,B)
edges_frame = edges_frame[sapply(1:nrow(edges_frame),
function(x)grepl(paste0("^",edges_frame$from_structure[x],"_\\d+$"),
edges_frame$to_structure[x])), c("from_id","to_id")]
nodes_frame = content_data
extra_row   = data.frame(id = 0, comment_score = 0, author=nodes_frame$author[1], controversiality = 0)
other_cols  = setdiff(colnames(nodes_frame),colnames(extra_row))
cols_to_add = as.data.frame(matrix(NA,nrow=1,ncol=length(other_cols)))
colnames(cols_to_add) = other_cols
extra_row = cbind(extra_row,cols_to_add)
nodes_frame = rbind(extra_row,nodes_frame)
nodes_frame$start_node = ifelse(nodes_frame$id==0,1,0)
nodes_frame = nodes_frame[,-grep("comment",colnames(nodes_frame))]
if(!is.na(write_to)){
fmt = gsub(".*\\.(\\w+)$","\\1",write_to)
if(!(fmt %in% c("edgelist", "pajek", "ncol","lgl", "graphml", "dimacs", "gml", "dot", "leda"))){
stop("export_format must be either edgelist, pajek, ncol, lgl, graphml, dimacs, gml, dot, or leda. See igraph::write.graph for details.")
}
write.graph(igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame),
write_to,
format = fmt)
}
if(plot==T){
colscale = function(x){
if(min(x$comment_score)<0){
min_col  = "firebrick2"
mincolsq = seq(min(as.numeric(x$comment_score)), 0, length.out = ceiling(nrow(x)/2))
maxcolsq = seq(0, max(as.numeric(x$comment_score)), length.out = ceiling(nrow(x)/2))
if(nrow(x) %% 2 == 1){
colsq  = c(mincolsq[-length(mincolsq)],maxcolsq[-1])
} else{
colsq  = c(mincolsq,maxcolsq)
}
} else{
min_col = "ivory"
colsq   = seq(0,max(as.numeric(x$comment_score)),length.out = nrow(x))
}
RP  = grDevices::colorRampPalette(c(min_col,"royalblue"))
col = RP(nrow(x))[c(findInterval(x$comment_score,colsq,all.inside=T))]
return(col)
}
g = igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame)
plot(g,
vertex.frame.color = ifelse(V(g)$controversiality==1,"red",NA),
layout             = layout.reingold.tilford,
vertex.label       = ifelse(V(g)$start_node==1,V(g)$author,V(g)$user),
vertex.label.cex   = ifelse(V(g)$start_node==1,1,0.65),
vertex.label.color = ifelse(V(g)$controversiality==1,"darkred","navy"),
vertex.label.font  = ifelse(V(g)$author==V(g)$user,4,1),
vertex.size        = ifelse(V(g)$start_node==1,20,12),
vertex.color       = ifelse(V(g)$start_node==1,"orange2",colscale(nodes_frame)),
edge.arrow.size    = 0.5,
edge.color         = "skyblue2")
title(content_data$title[1],cex.main=0.75,col.main="royalblue")
}
return(igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame))
}
construct_graph(test2,write_to="test.graphml")
View(test2)
construct_graph = function(content_data,plot=T,write_to=NA){
require(igraph)
edges_frame = content_data[,c("id","structure")]
if(sum(duplicated(edges_frame$structure))>0){
stop("duplicates found in the structure variable -- make sure that content_data only contains a single thread")
}
edges_frame$structure = paste0("0_",as.character(edges_frame$structure))
edges_frame = rbind(data.frame(id="0",structure="0",stringsAsFactors=F),edges_frame)
A = B = edges_frame
colnames(A) = c("from_id","from_structure")
colnames(B) = c("to_id",  "to_structure")
edges_frame = merge(A,B)
edges_frame = edges_frame[sapply(1:nrow(edges_frame),
function(x)grepl(paste0("^",edges_frame$from_structure[x],"_\\d+$"),
edges_frame$to_structure[x])), c("from_id","to_id")]
nodes_frame = content_data
extra_row   = data.frame(id = 0, comment_score = 0, author=nodes_frame$author[1], controversiality = 0)
other_cols  = setdiff(colnames(nodes_frame),colnames(extra_row))
cols_to_add = as.data.frame(matrix(NA,nrow=1,ncol=length(other_cols)))
colnames(cols_to_add) = other_cols
extra_row = cbind(extra_row,cols_to_add)
nodes_frame = rbind(extra_row,nodes_frame)
nodes_frame$start_node = ifelse(nodes_frame$id==0,1,0)
nodes_frame = nodes_frame[,-which(colnames(nodes_frame)=="comment")]
# comments create problems when you export the file and try to read it with other software
if(!is.na(write_to)){
fmt = gsub(".*\\.(\\w+)$","\\1",write_to)
if(!(fmt %in% c("edgelist", "pajek", "ncol","lgl", "graphml", "dimacs", "gml", "dot", "leda"))){
stop("export_format must be either edgelist, pajek, ncol, lgl, graphml, dimacs, gml, dot, or leda. See igraph::write.graph for details.")
}
write.graph(igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame),
write_to,
format = fmt)
}
if(plot==T){
colscale = function(x){
if(min(x$comment_score)<0){
min_col  = "firebrick2"
mincolsq = seq(min(as.numeric(x$comment_score)), 0, length.out = ceiling(nrow(x)/2))
maxcolsq = seq(0, max(as.numeric(x$comment_score)), length.out = ceiling(nrow(x)/2))
if(nrow(x) %% 2 == 1){
colsq  = c(mincolsq[-length(mincolsq)],maxcolsq[-1])
} else{
colsq  = c(mincolsq,maxcolsq)
}
} else{
min_col = "ivory"
colsq   = seq(0,max(as.numeric(x$comment_score)),length.out = nrow(x))
}
RP  = grDevices::colorRampPalette(c(min_col,"royalblue"))
col = RP(nrow(x))[c(findInterval(x$comment_score,colsq,all.inside=T))]
return(col)
}
g = igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame)
plot(g,
vertex.frame.color = ifelse(V(g)$controversiality==1,"red",NA),
layout             = layout.reingold.tilford,
vertex.label       = ifelse(V(g)$start_node==1,V(g)$author,V(g)$user),
vertex.label.cex   = ifelse(V(g)$start_node==1,1,0.65),
vertex.label.color = ifelse(V(g)$controversiality==1,"darkred","navy"),
vertex.label.font  = ifelse(V(g)$author==V(g)$user,4,1),
vertex.size        = ifelse(V(g)$start_node==1,20,12),
vertex.color       = ifelse(V(g)$start_node==1,"orange2",colscale(nodes_frame)),
edge.arrow.size    = 0.5,
edge.color         = "skyblue2")
title(content_data$title[1],cex.main=0.75,col.main="royalblue")
}
return(igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame))
}
construct_graph(test2,write_to="test.graphml")
content_data = test2
edges_frame = content_data[,c("id","structure")]
edges_frame$structure = paste0("0_",as.character(edges_frame$structure))
edges_frame = rbind(data.frame(id="0",structure="0",stringsAsFactors=F),edges_frame)
A = B = edges_frame
colnames(A) = c("from_id","from_structure")
colnames(B) = c("to_id",  "to_structure")
edges_frame = merge(A,B)
edges_frame = edges_frame[sapply(1:nrow(edges_frame),
function(x)grepl(paste0("^",edges_frame$from_structure[x],"_\\d+$"),
edges_frame$to_structure[x])), c("from_id","to_id")]
nodes_frame = content_data
extra_row   = data.frame(id = 0, comment_score = 0, author=nodes_frame$author[1], controversiality = 0)
other_cols  = setdiff(colnames(nodes_frame),colnames(extra_row))
cols_to_add = as.data.frame(matrix(NA,nrow=1,ncol=length(other_cols)))
colnames(cols_to_add) = other_cols
extra_row = cbind(extra_row,cols_to_add)
nodes_frame = rbind(extra_row,nodes_frame)
nodes_frame$start_node = ifelse(nodes_frame$id==0,1,0)
nodes_frame = nodes_frame[,-which(colnames(nodes_frame)=="comment")]
str(nodes_frame)
str(content_data)
URL
data_extract = data.frame(id               = numeric(),
structure        = character(),
post_date        = as.Date(character()),
comm_date        = as.Date(character()),
num_comments     = numeric(),
subreddit        = character(),
upvote_prop      = numeric(),
post_score       = numeric(),
author           = character(),
user             = character(),
comment_score    = numeric(),
controversiality = numeric(),
comment          = character(),
title            = character(),
post_text        = character(),
link             = character(),
domain           = character(),
URL              = character())
TEMP          =               cbind(id               = NA,
structure        = gsub("FALSE ","",structure[!grepl("TRUE",structure)]),
post_date        = format(as.Date(as.POSIXct(meta.node$created_utc,origin="1970-01-01")),"%d-%m-%y"),
comm_date        = format(as.Date(as.POSIXct(unlist(lapply(main.node, function(x){GetAttribute(x,"created_utc")})),
origin="1970-01-01")),"%d-%m-%y"),
num_comments     = meta.node$num_comments,
subreddit        = meta.node$subreddit,
upvote_prop      = meta.node$upvote_ratio,
post_score       = meta.node$score,
author           = meta.node$author,
user             = unlist(lapply(main.node, function(x){GetAttribute(x,"author")})),
comment_score    = unlist(lapply(main.node, function(x){GetAttribute(x,"score")})),
controversiality = unlist(lapply(main.node, function(x){GetAttribute(x,"controversiality")})),
comment          = unlist(lapply(main.node, function(x){GetAttribute(x,"body")})),
title            = meta.node$title,
post_text        = meta.node$selftext,
link             = meta.node$url,
domain           = meta.node$domain,
URL              = URL))
TEMP          =               cbind(id               = NA,
structure        = gsub("FALSE ","",structure[!grepl("TRUE",structure)]),
post_date        = format(as.Date(as.POSIXct(meta.node$created_utc,origin="1970-01-01")),"%d-%m-%y"),
comm_date        = format(as.Date(as.POSIXct(unlist(lapply(main.node, function(x){GetAttribute(x,"created_utc")})),
origin="1970-01-01")),"%d-%m-%y"),
num_comments     = meta.node$num_comments,
subreddit        = meta.node$subreddit,
upvote_prop      = meta.node$upvote_ratio,
post_score       = meta.node$score,
author           = meta.node$author,
user             = unlist(lapply(main.node, function(x){GetAttribute(x,"author")})),
comment_score    = unlist(lapply(main.node, function(x){GetAttribute(x,"score")})),
controversiality = unlist(lapply(main.node, function(x){GetAttribute(x,"controversiality")})),
comment          = unlist(lapply(main.node, function(x){GetAttribute(x,"body")})),
title            = meta.node$title,
post_text        = meta.node$selftext,
link             = meta.node$url,
domain           = meta.node$domain,
URL              = URL)
str(TEMP)
TEMP          =          data.frame(id               = NA,
structure        = gsub("FALSE ","",structure[!grepl("TRUE",structure)]),
post_date        = format(as.Date(as.POSIXct(meta.node$created_utc,origin="1970-01-01")),"%d-%m-%y"),
comm_date        = format(as.Date(as.POSIXct(unlist(lapply(main.node, function(x){GetAttribute(x,"created_utc")})),
origin="1970-01-01")),"%d-%m-%y"),
num_comments     = meta.node$num_comments,
subreddit        = meta.node$subreddit,
upvote_prop      = meta.node$upvote_ratio,
post_score       = meta.node$score,
author           = meta.node$author,
user             = unlist(lapply(main.node, function(x){GetAttribute(x,"author")})),
comment_score    = unlist(lapply(main.node, function(x){GetAttribute(x,"score")})),
controversiality = unlist(lapply(main.node, function(x){GetAttribute(x,"controversiality")})),
comment          = unlist(lapply(main.node, function(x){GetAttribute(x,"body")})),
title            = meta.node$title,
post_text        = meta.node$selftext,
link             = meta.node$url,
domain           = meta.node$domain,
URL              = URL)
str(TEMP)
TEMP          =          data.frame(id               = NA,
structure        = gsub("FALSE ","",structure[!grepl("TRUE",structure)]),
post_date        = format(as.Date(as.POSIXct(meta.node$created_utc,origin="1970-01-01")),"%d-%m-%y"),
comm_date        = format(as.Date(as.POSIXct(unlist(lapply(main.node, function(x){GetAttribute(x,"created_utc")})),
origin="1970-01-01")),"%d-%m-%y"),
num_comments     = meta.node$num_comments,
subreddit        = meta.node$subreddit,
upvote_prop      = meta.node$upvote_ratio,
post_score       = meta.node$score,
author           = meta.node$author,
user             = unlist(lapply(main.node, function(x){GetAttribute(x,"author")})),
comment_score    = unlist(lapply(main.node, function(x){GetAttribute(x,"score")})),
controversiality = unlist(lapply(main.node, function(x){GetAttribute(x,"controversiality")})),
comment          = unlist(lapply(main.node, function(x){GetAttribute(x,"body")})),
title            = meta.node$title,
post_text        = meta.node$selftext,
link             = meta.node$url,
domain           = meta.node$domain,
URL              = URL,
stringsAsFactors = FALSE)
str(TEMP)
reddit_content = function(URL,wait_time=2){
if(is.null(URL) | length(URL)==0 | !is.character(URL)){stop("invalid URL parameter")}
# setting up a function for extraction of comment specific information:
GetAttribute  = function(node,feature){
Attribute   = node$data[[feature]]
replies     = node$data$replies
reply.nodes = if (is.list(replies)) replies$data$children else NULL
return(list(Attribute, lapply(reply.nodes,function(x){GetAttribute(x,feature)})))
}
get.structure = function(node, depth=0) {
if(is.null(node)) {return(list())}
filter     = is.null(node$data$author)
replies     = node$data$replies
reply.nodes = if (is.list(replies)) replies$data$children else NULL
return(list(paste0(filter," ",depth), lapply(1:length(reply.nodes), function(x) get.structure(reply.nodes[[x]], paste0(depth, "_", x)))))
}
# setting up the data frame
data_extract = data.frame(id               = numeric(),
structure        = character(),
post_date        = as.Date(character()),
comm_date        = as.Date(character()),
num_comments     = numeric(),
subreddit        = character(),
upvote_prop      = numeric(),
post_score       = numeric(),
author           = character(),
user             = character(),
comment_score    = numeric(),
controversiality = numeric(),
comment          = character(),
title            = character(),
post_text        = character(),
link             = character(),
domain           = character(),
URL              = character())
pb = utils::txtProgressBar(min = 0, max = length(URL), style = 3)
for(i in seq(URL)){
if(!grepl("\\?ref=search_posts$",URL[i])) URL[i] = paste0(gsub("/$","",URL[i]),"/?ref=search_posts")
X        = paste0(gsub("\\?ref=search_posts$","",URL[i]),".json?limit=500") # 500 is the maximum
raw_data = tryCatch(RJSONIO::fromJSON(readLines(X, warn = FALSE)),error = function(e) NULL)
# try again if it fails
if(is.null(raw_data)){
Sys.sleep(min(1,wait_time))
raw_data = tryCatch(RJSONIO::fromJSON(readLines(X, warn = FALSE)),error = function(e) NULL)
}
if(is.null(raw_data)==FALSE){
# extracting comment specific information:
meta.node     = raw_data[[1]]$data$children[[1]]$data
main.node     = raw_data[[2]]$data$children
if(min(length(meta.node),length(main.node))>0){
structure     = unlist(lapply(1:length(main.node), function(x) get.structure(main.node[[x]], x)))
TEMP          =          data.frame(id               = NA,
structure        = gsub("FALSE ","",structure[!grepl("TRUE",structure)]),
post_date        = format(as.Date(as.POSIXct(meta.node$created_utc,origin="1970-01-01")),"%d-%m-%y"),
comm_date        = format(as.Date(as.POSIXct(unlist(lapply(main.node, function(x){GetAttribute(x,"created_utc")})),
origin="1970-01-01")),"%d-%m-%y"),
num_comments     = meta.node$num_comments,
subreddit        = meta.node$subreddit,
upvote_prop      = meta.node$upvote_ratio,
post_score       = meta.node$score,
author           = meta.node$author,
user             = unlist(lapply(main.node, function(x){GetAttribute(x,"author")})),
comment_score    = unlist(lapply(main.node, function(x){GetAttribute(x,"score")})),
controversiality = unlist(lapply(main.node, function(x){GetAttribute(x,"controversiality")})),
comment          = unlist(lapply(main.node, function(x){GetAttribute(x,"body")})),
title            = meta.node$title,
post_text        = meta.node$selftext,
link             = meta.node$url,
domain           = meta.node$domain,
URL              = URL[i],
stringsAsFactors = FALSE)
TEMP$id = 1:nrow(TEMP)
if(dim(TEMP)[1]>0 & dim(TEMP)[2]>0) data_extract = rbind(TEMP,data_extract)
else print(paste("missed",i,":",URL[i]))
}
}
utils::setTxtProgressBar(pb, i)
Sys.sleep(min(2,wait_time))
}
close(pb)
return(data_extract)
}
test2 = reddit_content("https://www.reddit.com/r/funny/comments/3q156b/rrrreeeemiiiiix/")
View(test2)
content_data = test2
edges_frame = content_data[,c("id","structure")]
edges_frame$structure = paste0("0_",as.character(edges_frame$structure))
edges_frame = rbind(data.frame(id="0",structure="0",stringsAsFactors=F),edges_frame)
A = B = edges_frame
colnames(A) = c("from_id","from_structure")
colnames(B) = c("to_id",  "to_structure")
edges_frame = merge(A,B)
edges_frame = edges_frame[sapply(1:nrow(edges_frame),
function(x)grepl(paste0("^",edges_frame$from_structure[x],"_\\d+$"),
edges_frame$to_structure[x])), c("from_id","to_id")]
nodes_frame = content_data
extra_row   = data.frame(id = 0, comment_score = 0, author=nodes_frame$author[1], controversiality = 0)
other_cols  = setdiff(colnames(nodes_frame),colnames(extra_row))
cols_to_add = as.data.frame(matrix(NA,nrow=1,ncol=length(other_cols)))
colnames(cols_to_add) = other_cols
extra_row = cbind(extra_row,cols_to_add)
nodes_frame = rbind(extra_row,nodes_frame)
nodes_frame$start_node = ifelse(nodes_frame$id==0,1,0)
nodes_frame = nodes_frame[,-which(colnames(nodes_frame)=="comment")]
str(nodes_frame)
construct_graph(test2,write_to="test.graphml")
plot(g,
vertex.frame.color = ifelse(V(g)$controversiality==1,"red",NA),
layout             = layout.reingold.tilford,
vertex.label       = ifelse(V(g)$start_node==1,V(g)$author,V(g)$user),
vertex.label.cex   = ifelse(V(g)$start_node==1,1,0.65),
vertex.label.color = ifelse(V(g)$controversiality==1,"darkred","navy"),
vertex.label.font  = ifelse(V(g)$author==V(g)$user,4,1),
vertex.size        = ifelse(V(g)$start_node==1,20,12),
vertex.color       = ifelse(V(g)$start_node==1,"orange2",colscale(nodes_frame)),
edge.arrow.size    = 0.5,
edge.color         = "skyblue2")
colscale = function(x){
if(min(x$comment_score)<0){
min_col  = "firebrick2"
mincolsq = seq(min(as.numeric(x$comment_score)), 0, length.out = ceiling(nrow(x)/2))
maxcolsq = seq(0, max(as.numeric(x$comment_score)), length.out = ceiling(nrow(x)/2))
if(nrow(x) %% 2 == 1){
colsq  = c(mincolsq[-length(mincolsq)],maxcolsq[-1])
} else{
colsq  = c(mincolsq,maxcolsq)
}
} else{
min_col = "ivory"
colsq   = seq(0,max(as.numeric(x$comment_score)),length.out = nrow(x))
}
RP  = grDevices::colorRampPalette(c(min_col,"royalblue"))
col = RP(nrow(x))[c(findInterval(x$comment_score,colsq,all.inside=T))]
return(col)
}
g = igraph::graph.data.frame(edges_frame, directed = T, vertices = nodes_frame)
plot(g,
vertex.frame.color = ifelse(V(g)$controversiality==1,"red",NA),
layout             = layout.reingold.tilford,
vertex.label       = ifelse(V(g)$start_node==1,V(g)$author,V(g)$user),
vertex.label.cex   = ifelse(V(g)$start_node==1,1,0.65),
vertex.label.color = ifelse(V(g)$controversiality==1,"darkred","navy"),
vertex.label.font  = ifelse(V(g)$author==V(g)$user,4,1),
vertex.size        = ifelse(V(g)$start_node==1,20,12),
vertex.color       = ifelse(V(g)$start_node==1,"orange2",colscale(nodes_frame)),
edge.arrow.size    = 0.5,
edge.color         = "skyblue2")
title(content_data$title[1],cex.main=0.75,col.main="royalblue")
pdf("pdf_out",width=10,height=10)
plot(g,
vertex.frame.color = ifelse(V(g)$controversiality==1,"red",NA),
layout             = layout.reingold.tilford,
vertex.label       = ifelse(V(g)$start_node==1,V(g)$author,V(g)$user),
vertex.label.cex   = ifelse(V(g)$start_node==1,1,0.65),
vertex.label.color = ifelse(V(g)$controversiality==1,"darkred","navy"),
vertex.label.font  = ifelse(V(g)$author==V(g)$user,4,1),
vertex.size        = ifelse(V(g)$start_node==1,20,12),
vertex.color       = ifelse(V(g)$start_node==1,"orange2",colscale(nodes_frame)),
edge.arrow.size    = 0.5,
edge.color         = "skyblue2")
title(content_data$title[1],cex.main=0.75,col.main="green")
dev.off()
pdf("pdf_out.pdf",width=20,height=20)
plot(g,
vertex.frame.color = ifelse(V(g)$controversiality==1,"red",NA),
layout             = layout.reingold.tilford,
vertex.label       = ifelse(V(g)$start_node==1,V(g)$author,V(g)$user),
vertex.label.cex   = ifelse(V(g)$start_node==1,1,0.65),
vertex.label.color = ifelse(V(g)$controversiality==1,"darkred","navy"),
vertex.label.font  = ifelse(V(g)$author==V(g)$user,4,1),
vertex.size        = ifelse(V(g)$start_node==1,20,12),
vertex.color       = ifelse(V(g)$start_node==1,"orange2",colscale(nodes_frame)),
edge.arrow.size    = 0.5,
edge.color         = "skyblue2")
title(content_data$title[1],cex.main=0.75,col.main="green")
dev.off()
pdf("pdf_out.pdf",width=20,height=20)
dev.off()
1+1
fdfsdfsdfsdfsfsdfssfdsfs
library(RJSONIO)
install.packages("RJSONIO")
library(RedditExtractoR)
library(RedditExtractoR)
1+1
install.packages("roxygen2")
?devtools::build
install.packages("devtools")
?devtools::build()
?devtools::build
devtools::build("RedditExtractoR")
devtools::build(pkg="RedditExtractoR")
devtools::build()
1+1
devtools::build()
